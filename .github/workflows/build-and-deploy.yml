name: Build & Deploy Splash Docker

permissions:
  contents: read
  packages: write # Needed for GHCR

on:
  push:
    branches:
      - main

env:
  APP_NAME: the-jade-platform/splash-page
  REGISTRY: ghcr.io
  IMAGE_NAME: the-jade-platform/splash-page
  IMAGE_TAG: latest
  CONTAINER_NAME: splash-page
  HOST_PORT: 3000
  CONTAINER_PORT: 3000
  EC2_USER: ec2-user
  BOT_NAME: jade-workerbot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ghcr.io/the-jade-platform/splash-page:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.BOT_NAME }}
          password: ${{ secrets.WORKER_BOT_PAT }}

      - name: Build Docker image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    needs: build-and-push
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Stop & remove old container if it exists
            if [ "$(docker ps -aq -f name=${{ env.CONTAINER_NAME }})" ]; then
              echo "Stopping and removing old container..."
              docker stop ${{ env.CONTAINER_NAME }} || true
              docker rm ${{ env.CONTAINER_NAME }} || true
            fi

            # Remove old image
            docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true

            # Free host port if anything is listening
            if lsof -i :${{ env.HOST_PORT }} >/dev/null 2>&1; then
              echo "Port ${{ env.HOST_PORT }} is in use on host, killing process..."
              fuser -k ${{ env.HOST_PORT }}/tcp
            fi

            # Free port if another docker container is publishing it
            if docker ps --format '{{.ID}} {{.Ports}}' | grep -q "0.0.0.0:${{ env.HOST_PORT }}"; then
              echo "Port ${{ env.HOST_PORT }} is in use by another container, removing it..."
              docker ps --format '{{.ID}} {{.Ports}}' | grep "0.0.0.0:${{ env.HOST_PORT }}" | awk '{print $1}' | xargs -r docker rm -f
            fi

            # Start new container on host port â†’ container port
            docker run -d --name ${{ env.CONTAINER_NAME }} -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
